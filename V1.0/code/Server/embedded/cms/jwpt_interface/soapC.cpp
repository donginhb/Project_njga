/* soapC.cpp
   Generated by gSOAP 2.8.45 for PublicService.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.45 2017-05-02 14:40:54 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, ""))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", "");
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_ns1__wsObjectInfo:
		return soap_in_ns1__wsObjectInfo(soap, NULL, NULL, "ns1:wsObjectInfo");
	case SOAP_TYPE_ns1__wsObjectInfoResponse:
		return soap_in_ns1__wsObjectInfoResponse(soap, NULL, NULL, "ns1:wsObjectInfoResponse");
	case SOAP_TYPE_ns1__batchObjectInfo:
		return soap_in_ns1__batchObjectInfo(soap, NULL, NULL, "ns1:batchObjectInfo");
	case SOAP_TYPE_ns1__batchObjectInfoResponse:
		return soap_in_ns1__batchObjectInfoResponse(soap, NULL, NULL, "ns1:batchObjectInfoResponse");
	case SOAP_TYPE_ns1__callDataBaseProcess:
		return soap_in_ns1__callDataBaseProcess(soap, NULL, NULL, "ns1:callDataBaseProcess");
	case SOAP_TYPE_ns1__callDataBaseProcessResponse:
		return soap_in_ns1__callDataBaseProcessResponse(soap, NULL, NULL, "ns1:callDataBaseProcessResponse");
	case SOAP_TYPE_ns1__deleteObjectInfo:
		return soap_in_ns1__deleteObjectInfo(soap, NULL, NULL, "ns1:deleteObjectInfo");
	case SOAP_TYPE_ns1__deleteObjectInfoResponse:
		return soap_in_ns1__deleteObjectInfoResponse(soap, NULL, NULL, "ns1:deleteObjectInfoResponse");
	case SOAP_TYPE_ns1__updateObjectInfo:
		return soap_in_ns1__updateObjectInfo(soap, NULL, NULL, "ns1:updateObjectInfo");
	case SOAP_TYPE_ns1__updateObjectInfoResponse:
		return soap_in_ns1__updateObjectInfoResponse(soap, NULL, NULL, "ns1:updateObjectInfoResponse");
	case SOAP_TYPE_ns1__insertObjectInfo:
		return soap_in_ns1__insertObjectInfo(soap, NULL, NULL, "ns1:insertObjectInfo");
	case SOAP_TYPE_ns1__insertObjectInfoResponse:
		return soap_in_ns1__insertObjectInfoResponse(soap, NULL, NULL, "ns1:insertObjectInfoResponse");
	case SOAP_TYPE_ns1__queryObjectInfo:
		return soap_in_ns1__queryObjectInfo(soap, NULL, NULL, "ns1:queryObjectInfo");
	case SOAP_TYPE_ns1__queryObjectInfoResponse:
		return soap_in_ns1__queryObjectInfoResponse(soap, NULL, NULL, "ns1:queryObjectInfoResponse");
	case SOAP_TYPE_SOAP_ENC__string:
	{	char **s;
		s = soap_in_SOAP_ENC__string(soap, NULL, NULL, "SOAP-ENC:string");
		return s ? *s : NULL;
	}
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:wsObjectInfo"))
		{	*type = SOAP_TYPE_ns1__wsObjectInfo;
			return soap_in_ns1__wsObjectInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:wsObjectInfoResponse"))
		{	*type = SOAP_TYPE_ns1__wsObjectInfoResponse;
			return soap_in_ns1__wsObjectInfoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:batchObjectInfo"))
		{	*type = SOAP_TYPE_ns1__batchObjectInfo;
			return soap_in_ns1__batchObjectInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:batchObjectInfoResponse"))
		{	*type = SOAP_TYPE_ns1__batchObjectInfoResponse;
			return soap_in_ns1__batchObjectInfoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:callDataBaseProcess"))
		{	*type = SOAP_TYPE_ns1__callDataBaseProcess;
			return soap_in_ns1__callDataBaseProcess(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:callDataBaseProcessResponse"))
		{	*type = SOAP_TYPE_ns1__callDataBaseProcessResponse;
			return soap_in_ns1__callDataBaseProcessResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:deleteObjectInfo"))
		{	*type = SOAP_TYPE_ns1__deleteObjectInfo;
			return soap_in_ns1__deleteObjectInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:deleteObjectInfoResponse"))
		{	*type = SOAP_TYPE_ns1__deleteObjectInfoResponse;
			return soap_in_ns1__deleteObjectInfoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:updateObjectInfo"))
		{	*type = SOAP_TYPE_ns1__updateObjectInfo;
			return soap_in_ns1__updateObjectInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:updateObjectInfoResponse"))
		{	*type = SOAP_TYPE_ns1__updateObjectInfoResponse;
			return soap_in_ns1__updateObjectInfoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:insertObjectInfo"))
		{	*type = SOAP_TYPE_ns1__insertObjectInfo;
			return soap_in_ns1__insertObjectInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:insertObjectInfoResponse"))
		{	*type = SOAP_TYPE_ns1__insertObjectInfoResponse;
			return soap_in_ns1__insertObjectInfoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:queryObjectInfo"))
		{	*type = SOAP_TYPE_ns1__queryObjectInfo;
			return soap_in_ns1__queryObjectInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:queryObjectInfoResponse"))
		{	*type = SOAP_TYPE_ns1__queryObjectInfoResponse;
			return soap_in_ns1__queryObjectInfoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SOAP-ENC:string"))
		{	char **s;
			*type = SOAP_TYPE_SOAP_ENC__string;
			s = soap_in_SOAP_ENC__string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				if (soap_ignore(soap) || soap_element_end_in(soap, NULL))
					return soap->error;
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_ns1__wsObjectInfo:
		return soap_out_ns1__wsObjectInfo(soap, tag, id, (const struct ns1__wsObjectInfo *)ptr, "ns1:wsObjectInfo");
	case SOAP_TYPE_ns1__wsObjectInfoResponse:
		return soap_out_ns1__wsObjectInfoResponse(soap, tag, id, (const struct ns1__wsObjectInfoResponse *)ptr, "ns1:wsObjectInfoResponse");
	case SOAP_TYPE_ns1__batchObjectInfo:
		return soap_out_ns1__batchObjectInfo(soap, tag, id, (const struct ns1__batchObjectInfo *)ptr, "ns1:batchObjectInfo");
	case SOAP_TYPE_ns1__batchObjectInfoResponse:
		return soap_out_ns1__batchObjectInfoResponse(soap, tag, id, (const struct ns1__batchObjectInfoResponse *)ptr, "ns1:batchObjectInfoResponse");
	case SOAP_TYPE_ns1__callDataBaseProcess:
		return soap_out_ns1__callDataBaseProcess(soap, tag, id, (const struct ns1__callDataBaseProcess *)ptr, "ns1:callDataBaseProcess");
	case SOAP_TYPE_ns1__callDataBaseProcessResponse:
		return soap_out_ns1__callDataBaseProcessResponse(soap, tag, id, (const struct ns1__callDataBaseProcessResponse *)ptr, "ns1:callDataBaseProcessResponse");
	case SOAP_TYPE_ns1__deleteObjectInfo:
		return soap_out_ns1__deleteObjectInfo(soap, tag, id, (const struct ns1__deleteObjectInfo *)ptr, "ns1:deleteObjectInfo");
	case SOAP_TYPE_ns1__deleteObjectInfoResponse:
		return soap_out_ns1__deleteObjectInfoResponse(soap, tag, id, (const struct ns1__deleteObjectInfoResponse *)ptr, "ns1:deleteObjectInfoResponse");
	case SOAP_TYPE_ns1__updateObjectInfo:
		return soap_out_ns1__updateObjectInfo(soap, tag, id, (const struct ns1__updateObjectInfo *)ptr, "ns1:updateObjectInfo");
	case SOAP_TYPE_ns1__updateObjectInfoResponse:
		return soap_out_ns1__updateObjectInfoResponse(soap, tag, id, (const struct ns1__updateObjectInfoResponse *)ptr, "ns1:updateObjectInfoResponse");
	case SOAP_TYPE_ns1__insertObjectInfo:
		return soap_out_ns1__insertObjectInfo(soap, tag, id, (const struct ns1__insertObjectInfo *)ptr, "ns1:insertObjectInfo");
	case SOAP_TYPE_ns1__insertObjectInfoResponse:
		return soap_out_ns1__insertObjectInfoResponse(soap, tag, id, (const struct ns1__insertObjectInfoResponse *)ptr, "ns1:insertObjectInfoResponse");
	case SOAP_TYPE_ns1__queryObjectInfo:
		return soap_out_ns1__queryObjectInfo(soap, tag, id, (const struct ns1__queryObjectInfo *)ptr, "ns1:queryObjectInfo");
	case SOAP_TYPE_ns1__queryObjectInfoResponse:
		return soap_out_ns1__queryObjectInfoResponse(soap, tag, id, (const struct ns1__queryObjectInfoResponse *)ptr, "ns1:queryObjectInfoResponse");
	case SOAP_TYPE_SOAP_ENC__string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "SOAP-ENC:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ns1__wsObjectInfo:
		soap_serialize_ns1__wsObjectInfo(soap, (const struct ns1__wsObjectInfo *)ptr);
		break;
	case SOAP_TYPE_ns1__wsObjectInfoResponse:
		soap_serialize_ns1__wsObjectInfoResponse(soap, (const struct ns1__wsObjectInfoResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__batchObjectInfo:
		soap_serialize_ns1__batchObjectInfo(soap, (const struct ns1__batchObjectInfo *)ptr);
		break;
	case SOAP_TYPE_ns1__batchObjectInfoResponse:
		soap_serialize_ns1__batchObjectInfoResponse(soap, (const struct ns1__batchObjectInfoResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__callDataBaseProcess:
		soap_serialize_ns1__callDataBaseProcess(soap, (const struct ns1__callDataBaseProcess *)ptr);
		break;
	case SOAP_TYPE_ns1__callDataBaseProcessResponse:
		soap_serialize_ns1__callDataBaseProcessResponse(soap, (const struct ns1__callDataBaseProcessResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__deleteObjectInfo:
		soap_serialize_ns1__deleteObjectInfo(soap, (const struct ns1__deleteObjectInfo *)ptr);
		break;
	case SOAP_TYPE_ns1__deleteObjectInfoResponse:
		soap_serialize_ns1__deleteObjectInfoResponse(soap, (const struct ns1__deleteObjectInfoResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__updateObjectInfo:
		soap_serialize_ns1__updateObjectInfo(soap, (const struct ns1__updateObjectInfo *)ptr);
		break;
	case SOAP_TYPE_ns1__updateObjectInfoResponse:
		soap_serialize_ns1__updateObjectInfoResponse(soap, (const struct ns1__updateObjectInfoResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__insertObjectInfo:
		soap_serialize_ns1__insertObjectInfo(soap, (const struct ns1__insertObjectInfo *)ptr);
		break;
	case SOAP_TYPE_ns1__insertObjectInfoResponse:
		soap_serialize_ns1__insertObjectInfoResponse(soap, (const struct ns1__insertObjectInfoResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__queryObjectInfo:
		soap_serialize_ns1__queryObjectInfo(soap, (const struct ns1__queryObjectInfo *)ptr);
		break;
	case SOAP_TYPE_ns1__queryObjectInfoResponse:
		soap_serialize_ns1__queryObjectInfoResponse(soap, (const struct ns1__queryObjectInfoResponse *)ptr);
		break;
	case SOAP_TYPE_SOAP_ENC__string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_ns1__queryObjectInfoResponse:
		return (void*)soap_instantiate_ns1__queryObjectInfoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__queryObjectInfo:
		return (void*)soap_instantiate_ns1__queryObjectInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__insertObjectInfoResponse:
		return (void*)soap_instantiate_ns1__insertObjectInfoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__insertObjectInfo:
		return (void*)soap_instantiate_ns1__insertObjectInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__updateObjectInfoResponse:
		return (void*)soap_instantiate_ns1__updateObjectInfoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__updateObjectInfo:
		return (void*)soap_instantiate_ns1__updateObjectInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__deleteObjectInfoResponse:
		return (void*)soap_instantiate_ns1__deleteObjectInfoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__deleteObjectInfo:
		return (void*)soap_instantiate_ns1__deleteObjectInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__callDataBaseProcessResponse:
		return (void*)soap_instantiate_ns1__callDataBaseProcessResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__callDataBaseProcess:
		return (void*)soap_instantiate_ns1__callDataBaseProcess(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__batchObjectInfoResponse:
		return (void*)soap_instantiate_ns1__batchObjectInfoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__batchObjectInfo:
		return (void*)soap_instantiate_ns1__batchObjectInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__wsObjectInfoResponse:
		return (void*)soap_instantiate_ns1__wsObjectInfoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__wsObjectInfo:
		return (void*)soap_instantiate_ns1__wsObjectInfo(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_ns1__queryObjectInfoResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns1__queryObjectInfoResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns1__queryObjectInfoResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__queryObjectInfo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns1__queryObjectInfo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns1__queryObjectInfo*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__insertObjectInfoResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns1__insertObjectInfoResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns1__insertObjectInfoResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__insertObjectInfo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns1__insertObjectInfo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns1__insertObjectInfo*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__updateObjectInfoResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns1__updateObjectInfoResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns1__updateObjectInfoResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__updateObjectInfo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns1__updateObjectInfo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns1__updateObjectInfo*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__deleteObjectInfoResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns1__deleteObjectInfoResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns1__deleteObjectInfoResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__deleteObjectInfo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns1__deleteObjectInfo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns1__deleteObjectInfo*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__callDataBaseProcessResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns1__callDataBaseProcessResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns1__callDataBaseProcessResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__callDataBaseProcess:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns1__callDataBaseProcess*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns1__callDataBaseProcess*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__batchObjectInfoResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns1__batchObjectInfoResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns1__batchObjectInfoResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__batchObjectInfo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns1__batchObjectInfo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns1__batchObjectInfo*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__wsObjectInfoResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns1__wsObjectInfoResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns1__wsObjectInfoResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__wsObjectInfo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns1__wsObjectInfo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns1__wsObjectInfo*>(p->ptr));
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		break;
#endif
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int t, int b)
{
	do
	{	switch (t)
		{
		default: return 0;
		}
	}
	while (t != b);
	return 1;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_ns1__queryObjectInfoResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__queryObjectInfoResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__queryObjectInfoResponse*)p = *(struct ns1__queryObjectInfoResponse*)q;
		break;
	case SOAP_TYPE_ns1__queryObjectInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__queryObjectInfo type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__queryObjectInfo*)p = *(struct ns1__queryObjectInfo*)q;
		break;
	case SOAP_TYPE_ns1__insertObjectInfoResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__insertObjectInfoResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__insertObjectInfoResponse*)p = *(struct ns1__insertObjectInfoResponse*)q;
		break;
	case SOAP_TYPE_ns1__insertObjectInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__insertObjectInfo type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__insertObjectInfo*)p = *(struct ns1__insertObjectInfo*)q;
		break;
	case SOAP_TYPE_ns1__updateObjectInfoResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__updateObjectInfoResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__updateObjectInfoResponse*)p = *(struct ns1__updateObjectInfoResponse*)q;
		break;
	case SOAP_TYPE_ns1__updateObjectInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__updateObjectInfo type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__updateObjectInfo*)p = *(struct ns1__updateObjectInfo*)q;
		break;
	case SOAP_TYPE_ns1__deleteObjectInfoResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__deleteObjectInfoResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__deleteObjectInfoResponse*)p = *(struct ns1__deleteObjectInfoResponse*)q;
		break;
	case SOAP_TYPE_ns1__deleteObjectInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__deleteObjectInfo type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__deleteObjectInfo*)p = *(struct ns1__deleteObjectInfo*)q;
		break;
	case SOAP_TYPE_ns1__callDataBaseProcessResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__callDataBaseProcessResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__callDataBaseProcessResponse*)p = *(struct ns1__callDataBaseProcessResponse*)q;
		break;
	case SOAP_TYPE_ns1__callDataBaseProcess:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__callDataBaseProcess type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__callDataBaseProcess*)p = *(struct ns1__callDataBaseProcess*)q;
		break;
	case SOAP_TYPE_ns1__batchObjectInfoResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__batchObjectInfoResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__batchObjectInfoResponse*)p = *(struct ns1__batchObjectInfoResponse*)q;
		break;
	case SOAP_TYPE_ns1__batchObjectInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__batchObjectInfo type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__batchObjectInfo*)p = *(struct ns1__batchObjectInfo*)q;
		break;
	case SOAP_TYPE_ns1__wsObjectInfoResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__wsObjectInfoResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__wsObjectInfoResponse*)p = *(struct ns1__wsObjectInfoResponse*)q;
		break;
	case SOAP_TYPE_ns1__wsObjectInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__wsObjectInfo type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__wsObjectInfo*)p = *(struct ns1__wsObjectInfo*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type = %d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return a;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n)
{
	int *a = static_cast<int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(int)));
	for (int *p = a; p && n--; ++p)
		soap_default_int(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag ? tag : "SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag ? tag : "SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__wsObjectInfo(struct soap *soap, struct ns1__wsObjectInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_SOAP_ENC__string(soap, &a->_senderID);
	soap_default_SOAP_ENC__string(soap, &a->_serviceID);
	soap_default_SOAP_ENC__string(soap, &a->_xmlSet);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__wsObjectInfo(struct soap *soap, const struct ns1__wsObjectInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_SOAP_ENC__string(soap, (char*const*)&a->_senderID);
	soap_serialize_SOAP_ENC__string(soap, (char*const*)&a->_serviceID);
	soap_serialize_SOAP_ENC__string(soap, (char*const*)&a->_xmlSet);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__wsObjectInfo(struct soap *soap, const char *tag, int id, const struct ns1__wsObjectInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__wsObjectInfo), type))
		return soap->error;
	if (soap_out_SOAP_ENC__string(soap, "senderID", -1, (char*const*)&a->_senderID, ""))
		return soap->error;
	if (soap_out_SOAP_ENC__string(soap, "serviceID", -1, (char*const*)&a->_serviceID, ""))
		return soap->error;
	if (soap_out_SOAP_ENC__string(soap, "xmlSet", -1, (char*const*)&a->_xmlSet, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__wsObjectInfo * SOAP_FMAC4 soap_in_ns1__wsObjectInfo(struct soap *soap, const char *tag, struct ns1__wsObjectInfo *a, const char *type)
{
	size_t soap_flag__senderID = 1;
	size_t soap_flag__serviceID = 1;
	size_t soap_flag__xmlSet = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__wsObjectInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__wsObjectInfo, sizeof(struct ns1__wsObjectInfo), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__wsObjectInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__senderID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_SOAP_ENC__string(soap, NULL, (char**)&a->_senderID, "SOAP-ENC:string"))
				{	soap_flag__senderID--;
					continue;
				}
			if (soap_flag__serviceID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_SOAP_ENC__string(soap, NULL, (char**)&a->_serviceID, "SOAP-ENC:string"))
				{	soap_flag__serviceID--;
					continue;
				}
			if (soap_flag__xmlSet && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_SOAP_ENC__string(soap, NULL, (char**)&a->_xmlSet, "SOAP-ENC:string"))
				{	soap_flag__xmlSet--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__wsObjectInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__wsObjectInfo, SOAP_TYPE_ns1__wsObjectInfo, sizeof(struct ns1__wsObjectInfo), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__wsObjectInfo * SOAP_FMAC2 soap_instantiate_ns1__wsObjectInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__wsObjectInfo(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__wsObjectInfo *p;
	size_t k = sizeof(struct ns1__wsObjectInfo);
	if (n < 0)
	{	p = SOAP_NEW(struct ns1__wsObjectInfo);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns1__wsObjectInfo, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__wsObjectInfo location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__wsObjectInfo, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__wsObjectInfo(struct soap *soap, const struct ns1__wsObjectInfo *a, const char *tag, const char *type)
{
	if (soap_out_ns1__wsObjectInfo(soap, tag ? tag : "ns1:wsObjectInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__wsObjectInfo * SOAP_FMAC4 soap_get_ns1__wsObjectInfo(struct soap *soap, struct ns1__wsObjectInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__wsObjectInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__wsObjectInfoResponse(struct soap *soap, struct ns1__wsObjectInfoResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_SOAP_ENC__string(soap, &a->_wsObjectInfoReturn);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__wsObjectInfoResponse(struct soap *soap, const struct ns1__wsObjectInfoResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_SOAP_ENC__string(soap, (char*const*)&a->_wsObjectInfoReturn);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__wsObjectInfoResponse(struct soap *soap, const char *tag, int id, const struct ns1__wsObjectInfoResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__wsObjectInfoResponse), type))
		return soap->error;
	if (!a->_wsObjectInfoReturn)
	{	if (soap_element_empty(soap, "wsObjectInfoReturn"))
			return soap->error;
	}
	else
	if (soap_out_SOAP_ENC__string(soap, "wsObjectInfoReturn", -1, (char*const*)&a->_wsObjectInfoReturn, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__wsObjectInfoResponse * SOAP_FMAC4 soap_in_ns1__wsObjectInfoResponse(struct soap *soap, const char *tag, struct ns1__wsObjectInfoResponse *a, const char *type)
{
	size_t soap_flag__wsObjectInfoReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__wsObjectInfoResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__wsObjectInfoResponse, sizeof(struct ns1__wsObjectInfoResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__wsObjectInfoResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__wsObjectInfoReturn && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_SOAP_ENC__string(soap, NULL, (char**)&a->_wsObjectInfoReturn, "SOAP-ENC:string"))
				{	soap_flag__wsObjectInfoReturn--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->_wsObjectInfoReturn))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__wsObjectInfoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__wsObjectInfoResponse, SOAP_TYPE_ns1__wsObjectInfoResponse, sizeof(struct ns1__wsObjectInfoResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__wsObjectInfoResponse * SOAP_FMAC2 soap_instantiate_ns1__wsObjectInfoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__wsObjectInfoResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__wsObjectInfoResponse *p;
	size_t k = sizeof(struct ns1__wsObjectInfoResponse);
	if (n < 0)
	{	p = SOAP_NEW(struct ns1__wsObjectInfoResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns1__wsObjectInfoResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__wsObjectInfoResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__wsObjectInfoResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__wsObjectInfoResponse(struct soap *soap, const struct ns1__wsObjectInfoResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns1__wsObjectInfoResponse(soap, tag ? tag : "ns1:wsObjectInfoResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__wsObjectInfoResponse * SOAP_FMAC4 soap_get_ns1__wsObjectInfoResponse(struct soap *soap, struct ns1__wsObjectInfoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__wsObjectInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__batchObjectInfo(struct soap *soap, struct ns1__batchObjectInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_SOAP_ENC__string(soap, &a->_senderID);
	soap_default_SOAP_ENC__string(soap, &a->_xmlSet);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__batchObjectInfo(struct soap *soap, const struct ns1__batchObjectInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_SOAP_ENC__string(soap, (char*const*)&a->_senderID);
	soap_serialize_SOAP_ENC__string(soap, (char*const*)&a->_xmlSet);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__batchObjectInfo(struct soap *soap, const char *tag, int id, const struct ns1__batchObjectInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__batchObjectInfo), type))
		return soap->error;
	if (soap_out_SOAP_ENC__string(soap, "senderID", -1, (char*const*)&a->_senderID, ""))
		return soap->error;
	if (soap_out_SOAP_ENC__string(soap, "xmlSet", -1, (char*const*)&a->_xmlSet, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__batchObjectInfo * SOAP_FMAC4 soap_in_ns1__batchObjectInfo(struct soap *soap, const char *tag, struct ns1__batchObjectInfo *a, const char *type)
{
	size_t soap_flag__senderID = 1;
	size_t soap_flag__xmlSet = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__batchObjectInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__batchObjectInfo, sizeof(struct ns1__batchObjectInfo), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__batchObjectInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__senderID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_SOAP_ENC__string(soap, NULL, (char**)&a->_senderID, "SOAP-ENC:string"))
				{	soap_flag__senderID--;
					continue;
				}
			if (soap_flag__xmlSet && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_SOAP_ENC__string(soap, NULL, (char**)&a->_xmlSet, "SOAP-ENC:string"))
				{	soap_flag__xmlSet--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__batchObjectInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__batchObjectInfo, SOAP_TYPE_ns1__batchObjectInfo, sizeof(struct ns1__batchObjectInfo), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__batchObjectInfo * SOAP_FMAC2 soap_instantiate_ns1__batchObjectInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__batchObjectInfo(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__batchObjectInfo *p;
	size_t k = sizeof(struct ns1__batchObjectInfo);
	if (n < 0)
	{	p = SOAP_NEW(struct ns1__batchObjectInfo);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns1__batchObjectInfo, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__batchObjectInfo location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__batchObjectInfo, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__batchObjectInfo(struct soap *soap, const struct ns1__batchObjectInfo *a, const char *tag, const char *type)
{
	if (soap_out_ns1__batchObjectInfo(soap, tag ? tag : "ns1:batchObjectInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__batchObjectInfo * SOAP_FMAC4 soap_get_ns1__batchObjectInfo(struct soap *soap, struct ns1__batchObjectInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__batchObjectInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__batchObjectInfoResponse(struct soap *soap, struct ns1__batchObjectInfoResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_SOAP_ENC__string(soap, &a->_batchObjectInfoReturn);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__batchObjectInfoResponse(struct soap *soap, const struct ns1__batchObjectInfoResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_SOAP_ENC__string(soap, (char*const*)&a->_batchObjectInfoReturn);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__batchObjectInfoResponse(struct soap *soap, const char *tag, int id, const struct ns1__batchObjectInfoResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__batchObjectInfoResponse), type))
		return soap->error;
	if (!a->_batchObjectInfoReturn)
	{	if (soap_element_empty(soap, "batchObjectInfoReturn"))
			return soap->error;
	}
	else
	if (soap_out_SOAP_ENC__string(soap, "batchObjectInfoReturn", -1, (char*const*)&a->_batchObjectInfoReturn, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__batchObjectInfoResponse * SOAP_FMAC4 soap_in_ns1__batchObjectInfoResponse(struct soap *soap, const char *tag, struct ns1__batchObjectInfoResponse *a, const char *type)
{
	size_t soap_flag__batchObjectInfoReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__batchObjectInfoResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__batchObjectInfoResponse, sizeof(struct ns1__batchObjectInfoResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__batchObjectInfoResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__batchObjectInfoReturn && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_SOAP_ENC__string(soap, NULL, (char**)&a->_batchObjectInfoReturn, "SOAP-ENC:string"))
				{	soap_flag__batchObjectInfoReturn--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->_batchObjectInfoReturn))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__batchObjectInfoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__batchObjectInfoResponse, SOAP_TYPE_ns1__batchObjectInfoResponse, sizeof(struct ns1__batchObjectInfoResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__batchObjectInfoResponse * SOAP_FMAC2 soap_instantiate_ns1__batchObjectInfoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__batchObjectInfoResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__batchObjectInfoResponse *p;
	size_t k = sizeof(struct ns1__batchObjectInfoResponse);
	if (n < 0)
	{	p = SOAP_NEW(struct ns1__batchObjectInfoResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns1__batchObjectInfoResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__batchObjectInfoResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__batchObjectInfoResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__batchObjectInfoResponse(struct soap *soap, const struct ns1__batchObjectInfoResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns1__batchObjectInfoResponse(soap, tag ? tag : "ns1:batchObjectInfoResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__batchObjectInfoResponse * SOAP_FMAC4 soap_get_ns1__batchObjectInfoResponse(struct soap *soap, struct ns1__batchObjectInfoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__batchObjectInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__callDataBaseProcess(struct soap *soap, struct ns1__callDataBaseProcess *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_SOAP_ENC__string(soap, &a->_senderID);
	soap_default_SOAP_ENC__string(soap, &a->_serviceID);
	soap_default_SOAP_ENC__string(soap, &a->_xmlSet);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__callDataBaseProcess(struct soap *soap, const struct ns1__callDataBaseProcess *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_SOAP_ENC__string(soap, (char*const*)&a->_senderID);
	soap_serialize_SOAP_ENC__string(soap, (char*const*)&a->_serviceID);
	soap_serialize_SOAP_ENC__string(soap, (char*const*)&a->_xmlSet);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__callDataBaseProcess(struct soap *soap, const char *tag, int id, const struct ns1__callDataBaseProcess *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__callDataBaseProcess), type))
		return soap->error;
	if (soap_out_SOAP_ENC__string(soap, "senderID", -1, (char*const*)&a->_senderID, ""))
		return soap->error;
	if (soap_out_SOAP_ENC__string(soap, "serviceID", -1, (char*const*)&a->_serviceID, ""))
		return soap->error;
	if (soap_out_SOAP_ENC__string(soap, "xmlSet", -1, (char*const*)&a->_xmlSet, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__callDataBaseProcess * SOAP_FMAC4 soap_in_ns1__callDataBaseProcess(struct soap *soap, const char *tag, struct ns1__callDataBaseProcess *a, const char *type)
{
	size_t soap_flag__senderID = 1;
	size_t soap_flag__serviceID = 1;
	size_t soap_flag__xmlSet = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__callDataBaseProcess *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__callDataBaseProcess, sizeof(struct ns1__callDataBaseProcess), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__callDataBaseProcess(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__senderID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_SOAP_ENC__string(soap, NULL, (char**)&a->_senderID, "SOAP-ENC:string"))
				{	soap_flag__senderID--;
					continue;
				}
			if (soap_flag__serviceID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_SOAP_ENC__string(soap, NULL, (char**)&a->_serviceID, "SOAP-ENC:string"))
				{	soap_flag__serviceID--;
					continue;
				}
			if (soap_flag__xmlSet && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_SOAP_ENC__string(soap, NULL, (char**)&a->_xmlSet, "SOAP-ENC:string"))
				{	soap_flag__xmlSet--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__callDataBaseProcess *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__callDataBaseProcess, SOAP_TYPE_ns1__callDataBaseProcess, sizeof(struct ns1__callDataBaseProcess), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__callDataBaseProcess * SOAP_FMAC2 soap_instantiate_ns1__callDataBaseProcess(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__callDataBaseProcess(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__callDataBaseProcess *p;
	size_t k = sizeof(struct ns1__callDataBaseProcess);
	if (n < 0)
	{	p = SOAP_NEW(struct ns1__callDataBaseProcess);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns1__callDataBaseProcess, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__callDataBaseProcess location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__callDataBaseProcess, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__callDataBaseProcess(struct soap *soap, const struct ns1__callDataBaseProcess *a, const char *tag, const char *type)
{
	if (soap_out_ns1__callDataBaseProcess(soap, tag ? tag : "ns1:callDataBaseProcess", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__callDataBaseProcess * SOAP_FMAC4 soap_get_ns1__callDataBaseProcess(struct soap *soap, struct ns1__callDataBaseProcess *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__callDataBaseProcess(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__callDataBaseProcessResponse(struct soap *soap, struct ns1__callDataBaseProcessResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_SOAP_ENC__string(soap, &a->_callDataBaseProcessReturn);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__callDataBaseProcessResponse(struct soap *soap, const struct ns1__callDataBaseProcessResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_SOAP_ENC__string(soap, (char*const*)&a->_callDataBaseProcessReturn);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__callDataBaseProcessResponse(struct soap *soap, const char *tag, int id, const struct ns1__callDataBaseProcessResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__callDataBaseProcessResponse), type))
		return soap->error;
	if (!a->_callDataBaseProcessReturn)
	{	if (soap_element_empty(soap, "callDataBaseProcessReturn"))
			return soap->error;
	}
	else
	if (soap_out_SOAP_ENC__string(soap, "callDataBaseProcessReturn", -1, (char*const*)&a->_callDataBaseProcessReturn, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__callDataBaseProcessResponse * SOAP_FMAC4 soap_in_ns1__callDataBaseProcessResponse(struct soap *soap, const char *tag, struct ns1__callDataBaseProcessResponse *a, const char *type)
{
	size_t soap_flag__callDataBaseProcessReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__callDataBaseProcessResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__callDataBaseProcessResponse, sizeof(struct ns1__callDataBaseProcessResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__callDataBaseProcessResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__callDataBaseProcessReturn && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_SOAP_ENC__string(soap, NULL, (char**)&a->_callDataBaseProcessReturn, "SOAP-ENC:string"))
				{	soap_flag__callDataBaseProcessReturn--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->_callDataBaseProcessReturn))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__callDataBaseProcessResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__callDataBaseProcessResponse, SOAP_TYPE_ns1__callDataBaseProcessResponse, sizeof(struct ns1__callDataBaseProcessResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__callDataBaseProcessResponse * SOAP_FMAC2 soap_instantiate_ns1__callDataBaseProcessResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__callDataBaseProcessResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__callDataBaseProcessResponse *p;
	size_t k = sizeof(struct ns1__callDataBaseProcessResponse);
	if (n < 0)
	{	p = SOAP_NEW(struct ns1__callDataBaseProcessResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns1__callDataBaseProcessResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__callDataBaseProcessResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__callDataBaseProcessResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__callDataBaseProcessResponse(struct soap *soap, const struct ns1__callDataBaseProcessResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns1__callDataBaseProcessResponse(soap, tag ? tag : "ns1:callDataBaseProcessResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__callDataBaseProcessResponse * SOAP_FMAC4 soap_get_ns1__callDataBaseProcessResponse(struct soap *soap, struct ns1__callDataBaseProcessResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__callDataBaseProcessResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteObjectInfo(struct soap *soap, struct ns1__deleteObjectInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_SOAP_ENC__string(soap, &a->_senderID);
	soap_default_SOAP_ENC__string(soap, &a->_serviceID);
	soap_default_SOAP_ENC__string(soap, &a->_xmlSet);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteObjectInfo(struct soap *soap, const struct ns1__deleteObjectInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_SOAP_ENC__string(soap, (char*const*)&a->_senderID);
	soap_serialize_SOAP_ENC__string(soap, (char*const*)&a->_serviceID);
	soap_serialize_SOAP_ENC__string(soap, (char*const*)&a->_xmlSet);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteObjectInfo(struct soap *soap, const char *tag, int id, const struct ns1__deleteObjectInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__deleteObjectInfo), type))
		return soap->error;
	if (soap_out_SOAP_ENC__string(soap, "senderID", -1, (char*const*)&a->_senderID, ""))
		return soap->error;
	if (soap_out_SOAP_ENC__string(soap, "serviceID", -1, (char*const*)&a->_serviceID, ""))
		return soap->error;
	if (soap_out_SOAP_ENC__string(soap, "xmlSet", -1, (char*const*)&a->_xmlSet, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__deleteObjectInfo * SOAP_FMAC4 soap_in_ns1__deleteObjectInfo(struct soap *soap, const char *tag, struct ns1__deleteObjectInfo *a, const char *type)
{
	size_t soap_flag__senderID = 1;
	size_t soap_flag__serviceID = 1;
	size_t soap_flag__xmlSet = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__deleteObjectInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__deleteObjectInfo, sizeof(struct ns1__deleteObjectInfo), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__deleteObjectInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__senderID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_SOAP_ENC__string(soap, NULL, (char**)&a->_senderID, "SOAP-ENC:string"))
				{	soap_flag__senderID--;
					continue;
				}
			if (soap_flag__serviceID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_SOAP_ENC__string(soap, NULL, (char**)&a->_serviceID, "SOAP-ENC:string"))
				{	soap_flag__serviceID--;
					continue;
				}
			if (soap_flag__xmlSet && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_SOAP_ENC__string(soap, NULL, (char**)&a->_xmlSet, "SOAP-ENC:string"))
				{	soap_flag__xmlSet--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__deleteObjectInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__deleteObjectInfo, SOAP_TYPE_ns1__deleteObjectInfo, sizeof(struct ns1__deleteObjectInfo), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__deleteObjectInfo * SOAP_FMAC2 soap_instantiate_ns1__deleteObjectInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__deleteObjectInfo(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__deleteObjectInfo *p;
	size_t k = sizeof(struct ns1__deleteObjectInfo);
	if (n < 0)
	{	p = SOAP_NEW(struct ns1__deleteObjectInfo);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns1__deleteObjectInfo, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__deleteObjectInfo location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__deleteObjectInfo, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteObjectInfo(struct soap *soap, const struct ns1__deleteObjectInfo *a, const char *tag, const char *type)
{
	if (soap_out_ns1__deleteObjectInfo(soap, tag ? tag : "ns1:deleteObjectInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__deleteObjectInfo * SOAP_FMAC4 soap_get_ns1__deleteObjectInfo(struct soap *soap, struct ns1__deleteObjectInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__deleteObjectInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteObjectInfoResponse(struct soap *soap, struct ns1__deleteObjectInfoResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_SOAP_ENC__string(soap, &a->_deleteObjectInfoReturn);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteObjectInfoResponse(struct soap *soap, const struct ns1__deleteObjectInfoResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_SOAP_ENC__string(soap, (char*const*)&a->_deleteObjectInfoReturn);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteObjectInfoResponse(struct soap *soap, const char *tag, int id, const struct ns1__deleteObjectInfoResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__deleteObjectInfoResponse), type))
		return soap->error;
	if (!a->_deleteObjectInfoReturn)
	{	if (soap_element_empty(soap, "deleteObjectInfoReturn"))
			return soap->error;
	}
	else
	if (soap_out_SOAP_ENC__string(soap, "deleteObjectInfoReturn", -1, (char*const*)&a->_deleteObjectInfoReturn, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__deleteObjectInfoResponse * SOAP_FMAC4 soap_in_ns1__deleteObjectInfoResponse(struct soap *soap, const char *tag, struct ns1__deleteObjectInfoResponse *a, const char *type)
{
	size_t soap_flag__deleteObjectInfoReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__deleteObjectInfoResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__deleteObjectInfoResponse, sizeof(struct ns1__deleteObjectInfoResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__deleteObjectInfoResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__deleteObjectInfoReturn && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_SOAP_ENC__string(soap, NULL, (char**)&a->_deleteObjectInfoReturn, "SOAP-ENC:string"))
				{	soap_flag__deleteObjectInfoReturn--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->_deleteObjectInfoReturn))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__deleteObjectInfoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__deleteObjectInfoResponse, SOAP_TYPE_ns1__deleteObjectInfoResponse, sizeof(struct ns1__deleteObjectInfoResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__deleteObjectInfoResponse * SOAP_FMAC2 soap_instantiate_ns1__deleteObjectInfoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__deleteObjectInfoResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__deleteObjectInfoResponse *p;
	size_t k = sizeof(struct ns1__deleteObjectInfoResponse);
	if (n < 0)
	{	p = SOAP_NEW(struct ns1__deleteObjectInfoResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns1__deleteObjectInfoResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__deleteObjectInfoResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__deleteObjectInfoResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteObjectInfoResponse(struct soap *soap, const struct ns1__deleteObjectInfoResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns1__deleteObjectInfoResponse(soap, tag ? tag : "ns1:deleteObjectInfoResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__deleteObjectInfoResponse * SOAP_FMAC4 soap_get_ns1__deleteObjectInfoResponse(struct soap *soap, struct ns1__deleteObjectInfoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__deleteObjectInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__updateObjectInfo(struct soap *soap, struct ns1__updateObjectInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_SOAP_ENC__string(soap, &a->_senderID);
	soap_default_SOAP_ENC__string(soap, &a->_serviceID);
	soap_default_SOAP_ENC__string(soap, &a->_xmlSet);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__updateObjectInfo(struct soap *soap, const struct ns1__updateObjectInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_SOAP_ENC__string(soap, (char*const*)&a->_senderID);
	soap_serialize_SOAP_ENC__string(soap, (char*const*)&a->_serviceID);
	soap_serialize_SOAP_ENC__string(soap, (char*const*)&a->_xmlSet);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__updateObjectInfo(struct soap *soap, const char *tag, int id, const struct ns1__updateObjectInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__updateObjectInfo), type))
		return soap->error;
	if (soap_out_SOAP_ENC__string(soap, "senderID", -1, (char*const*)&a->_senderID, ""))
		return soap->error;
	if (soap_out_SOAP_ENC__string(soap, "serviceID", -1, (char*const*)&a->_serviceID, ""))
		return soap->error;
	if (soap_out_SOAP_ENC__string(soap, "xmlSet", -1, (char*const*)&a->_xmlSet, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__updateObjectInfo * SOAP_FMAC4 soap_in_ns1__updateObjectInfo(struct soap *soap, const char *tag, struct ns1__updateObjectInfo *a, const char *type)
{
	size_t soap_flag__senderID = 1;
	size_t soap_flag__serviceID = 1;
	size_t soap_flag__xmlSet = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__updateObjectInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__updateObjectInfo, sizeof(struct ns1__updateObjectInfo), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__updateObjectInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__senderID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_SOAP_ENC__string(soap, NULL, (char**)&a->_senderID, "SOAP-ENC:string"))
				{	soap_flag__senderID--;
					continue;
				}
			if (soap_flag__serviceID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_SOAP_ENC__string(soap, NULL, (char**)&a->_serviceID, "SOAP-ENC:string"))
				{	soap_flag__serviceID--;
					continue;
				}
			if (soap_flag__xmlSet && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_SOAP_ENC__string(soap, NULL, (char**)&a->_xmlSet, "SOAP-ENC:string"))
				{	soap_flag__xmlSet--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__updateObjectInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__updateObjectInfo, SOAP_TYPE_ns1__updateObjectInfo, sizeof(struct ns1__updateObjectInfo), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__updateObjectInfo * SOAP_FMAC2 soap_instantiate_ns1__updateObjectInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__updateObjectInfo(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__updateObjectInfo *p;
	size_t k = sizeof(struct ns1__updateObjectInfo);
	if (n < 0)
	{	p = SOAP_NEW(struct ns1__updateObjectInfo);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns1__updateObjectInfo, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__updateObjectInfo location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__updateObjectInfo, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__updateObjectInfo(struct soap *soap, const struct ns1__updateObjectInfo *a, const char *tag, const char *type)
{
	if (soap_out_ns1__updateObjectInfo(soap, tag ? tag : "ns1:updateObjectInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__updateObjectInfo * SOAP_FMAC4 soap_get_ns1__updateObjectInfo(struct soap *soap, struct ns1__updateObjectInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__updateObjectInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__updateObjectInfoResponse(struct soap *soap, struct ns1__updateObjectInfoResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_SOAP_ENC__string(soap, &a->_updateObjectInfoReturn);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__updateObjectInfoResponse(struct soap *soap, const struct ns1__updateObjectInfoResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_SOAP_ENC__string(soap, (char*const*)&a->_updateObjectInfoReturn);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__updateObjectInfoResponse(struct soap *soap, const char *tag, int id, const struct ns1__updateObjectInfoResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__updateObjectInfoResponse), type))
		return soap->error;
	if (!a->_updateObjectInfoReturn)
	{	if (soap_element_empty(soap, "updateObjectInfoReturn"))
			return soap->error;
	}
	else
	if (soap_out_SOAP_ENC__string(soap, "updateObjectInfoReturn", -1, (char*const*)&a->_updateObjectInfoReturn, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__updateObjectInfoResponse * SOAP_FMAC4 soap_in_ns1__updateObjectInfoResponse(struct soap *soap, const char *tag, struct ns1__updateObjectInfoResponse *a, const char *type)
{
	size_t soap_flag__updateObjectInfoReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__updateObjectInfoResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__updateObjectInfoResponse, sizeof(struct ns1__updateObjectInfoResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__updateObjectInfoResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__updateObjectInfoReturn && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_SOAP_ENC__string(soap, NULL, (char**)&a->_updateObjectInfoReturn, "SOAP-ENC:string"))
				{	soap_flag__updateObjectInfoReturn--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->_updateObjectInfoReturn))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__updateObjectInfoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__updateObjectInfoResponse, SOAP_TYPE_ns1__updateObjectInfoResponse, sizeof(struct ns1__updateObjectInfoResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__updateObjectInfoResponse * SOAP_FMAC2 soap_instantiate_ns1__updateObjectInfoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__updateObjectInfoResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__updateObjectInfoResponse *p;
	size_t k = sizeof(struct ns1__updateObjectInfoResponse);
	if (n < 0)
	{	p = SOAP_NEW(struct ns1__updateObjectInfoResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns1__updateObjectInfoResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__updateObjectInfoResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__updateObjectInfoResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__updateObjectInfoResponse(struct soap *soap, const struct ns1__updateObjectInfoResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns1__updateObjectInfoResponse(soap, tag ? tag : "ns1:updateObjectInfoResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__updateObjectInfoResponse * SOAP_FMAC4 soap_get_ns1__updateObjectInfoResponse(struct soap *soap, struct ns1__updateObjectInfoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__updateObjectInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__insertObjectInfo(struct soap *soap, struct ns1__insertObjectInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_SOAP_ENC__string(soap, &a->_senderID);
	soap_default_SOAP_ENC__string(soap, &a->_serviceID);
	soap_default_SOAP_ENC__string(soap, &a->_xmlSet);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__insertObjectInfo(struct soap *soap, const struct ns1__insertObjectInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_SOAP_ENC__string(soap, (char*const*)&a->_senderID);
	soap_serialize_SOAP_ENC__string(soap, (char*const*)&a->_serviceID);
	soap_serialize_SOAP_ENC__string(soap, (char*const*)&a->_xmlSet);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__insertObjectInfo(struct soap *soap, const char *tag, int id, const struct ns1__insertObjectInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__insertObjectInfo), type))
		return soap->error;
	if (soap_out_SOAP_ENC__string(soap, "senderID", -1, (char*const*)&a->_senderID, ""))
		return soap->error;
	if (soap_out_SOAP_ENC__string(soap, "serviceID", -1, (char*const*)&a->_serviceID, ""))
		return soap->error;
	if (soap_out_SOAP_ENC__string(soap, "xmlSet", -1, (char*const*)&a->_xmlSet, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__insertObjectInfo * SOAP_FMAC4 soap_in_ns1__insertObjectInfo(struct soap *soap, const char *tag, struct ns1__insertObjectInfo *a, const char *type)
{
	size_t soap_flag__senderID = 1;
	size_t soap_flag__serviceID = 1;
	size_t soap_flag__xmlSet = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__insertObjectInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__insertObjectInfo, sizeof(struct ns1__insertObjectInfo), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__insertObjectInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__senderID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_SOAP_ENC__string(soap, NULL, (char**)&a->_senderID, "SOAP-ENC:string"))
				{	soap_flag__senderID--;
					continue;
				}
			if (soap_flag__serviceID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_SOAP_ENC__string(soap, NULL, (char**)&a->_serviceID, "SOAP-ENC:string"))
				{	soap_flag__serviceID--;
					continue;
				}
			if (soap_flag__xmlSet && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_SOAP_ENC__string(soap, NULL, (char**)&a->_xmlSet, "SOAP-ENC:string"))
				{	soap_flag__xmlSet--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__insertObjectInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__insertObjectInfo, SOAP_TYPE_ns1__insertObjectInfo, sizeof(struct ns1__insertObjectInfo), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__insertObjectInfo * SOAP_FMAC2 soap_instantiate_ns1__insertObjectInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__insertObjectInfo(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__insertObjectInfo *p;
	size_t k = sizeof(struct ns1__insertObjectInfo);
	if (n < 0)
	{	p = SOAP_NEW(struct ns1__insertObjectInfo);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns1__insertObjectInfo, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__insertObjectInfo location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__insertObjectInfo, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__insertObjectInfo(struct soap *soap, const struct ns1__insertObjectInfo *a, const char *tag, const char *type)
{
	if (soap_out_ns1__insertObjectInfo(soap, tag ? tag : "ns1:insertObjectInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__insertObjectInfo * SOAP_FMAC4 soap_get_ns1__insertObjectInfo(struct soap *soap, struct ns1__insertObjectInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__insertObjectInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__insertObjectInfoResponse(struct soap *soap, struct ns1__insertObjectInfoResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_SOAP_ENC__string(soap, &a->_insertObjectInfoReturn);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__insertObjectInfoResponse(struct soap *soap, const struct ns1__insertObjectInfoResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_SOAP_ENC__string(soap, (char*const*)&a->_insertObjectInfoReturn);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__insertObjectInfoResponse(struct soap *soap, const char *tag, int id, const struct ns1__insertObjectInfoResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__insertObjectInfoResponse), type))
		return soap->error;
	if (!a->_insertObjectInfoReturn)
	{	if (soap_element_empty(soap, "insertObjectInfoReturn"))
			return soap->error;
	}
	else
	if (soap_out_SOAP_ENC__string(soap, "insertObjectInfoReturn", -1, (char*const*)&a->_insertObjectInfoReturn, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__insertObjectInfoResponse * SOAP_FMAC4 soap_in_ns1__insertObjectInfoResponse(struct soap *soap, const char *tag, struct ns1__insertObjectInfoResponse *a, const char *type)
{
	size_t soap_flag__insertObjectInfoReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__insertObjectInfoResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__insertObjectInfoResponse, sizeof(struct ns1__insertObjectInfoResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__insertObjectInfoResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__insertObjectInfoReturn && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_SOAP_ENC__string(soap, NULL, (char**)&a->_insertObjectInfoReturn, "SOAP-ENC:string"))
				{	soap_flag__insertObjectInfoReturn--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->_insertObjectInfoReturn))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__insertObjectInfoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__insertObjectInfoResponse, SOAP_TYPE_ns1__insertObjectInfoResponse, sizeof(struct ns1__insertObjectInfoResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__insertObjectInfoResponse * SOAP_FMAC2 soap_instantiate_ns1__insertObjectInfoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__insertObjectInfoResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__insertObjectInfoResponse *p;
	size_t k = sizeof(struct ns1__insertObjectInfoResponse);
	if (n < 0)
	{	p = SOAP_NEW(struct ns1__insertObjectInfoResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns1__insertObjectInfoResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__insertObjectInfoResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__insertObjectInfoResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__insertObjectInfoResponse(struct soap *soap, const struct ns1__insertObjectInfoResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns1__insertObjectInfoResponse(soap, tag ? tag : "ns1:insertObjectInfoResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__insertObjectInfoResponse * SOAP_FMAC4 soap_get_ns1__insertObjectInfoResponse(struct soap *soap, struct ns1__insertObjectInfoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__insertObjectInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__queryObjectInfo(struct soap *soap, struct ns1__queryObjectInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_SOAP_ENC__string(soap, &a->_senderID);
	soap_default_SOAP_ENC__string(soap, &a->_serviceID);
	soap_default_SOAP_ENC__string(soap, &a->_xmlSet);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__queryObjectInfo(struct soap *soap, const struct ns1__queryObjectInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_SOAP_ENC__string(soap, (char*const*)&a->_senderID);
	soap_serialize_SOAP_ENC__string(soap, (char*const*)&a->_serviceID);
	soap_serialize_SOAP_ENC__string(soap, (char*const*)&a->_xmlSet);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__queryObjectInfo(struct soap *soap, const char *tag, int id, const struct ns1__queryObjectInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__queryObjectInfo), type))
		return soap->error;
	if (soap_out_SOAP_ENC__string(soap, "senderID", -1, (char*const*)&a->_senderID, ""))
		return soap->error;
	if (soap_out_SOAP_ENC__string(soap, "serviceID", -1, (char*const*)&a->_serviceID, ""))
		return soap->error;
	if (soap_out_SOAP_ENC__string(soap, "xmlSet", -1, (char*const*)&a->_xmlSet, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__queryObjectInfo * SOAP_FMAC4 soap_in_ns1__queryObjectInfo(struct soap *soap, const char *tag, struct ns1__queryObjectInfo *a, const char *type)
{
	size_t soap_flag__senderID = 1;
	size_t soap_flag__serviceID = 1;
	size_t soap_flag__xmlSet = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__queryObjectInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__queryObjectInfo, sizeof(struct ns1__queryObjectInfo), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__queryObjectInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__senderID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_SOAP_ENC__string(soap, NULL, (char**)&a->_senderID, "SOAP-ENC:string"))
				{	soap_flag__senderID--;
					continue;
				}
			if (soap_flag__serviceID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_SOAP_ENC__string(soap, NULL, (char**)&a->_serviceID, "SOAP-ENC:string"))
				{	soap_flag__serviceID--;
					continue;
				}
			if (soap_flag__xmlSet && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_SOAP_ENC__string(soap, NULL, (char**)&a->_xmlSet, "SOAP-ENC:string"))
				{	soap_flag__xmlSet--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__queryObjectInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__queryObjectInfo, SOAP_TYPE_ns1__queryObjectInfo, sizeof(struct ns1__queryObjectInfo), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__queryObjectInfo * SOAP_FMAC2 soap_instantiate_ns1__queryObjectInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__queryObjectInfo(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__queryObjectInfo *p;
	size_t k = sizeof(struct ns1__queryObjectInfo);
	if (n < 0)
	{	p = SOAP_NEW(struct ns1__queryObjectInfo);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns1__queryObjectInfo, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__queryObjectInfo location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__queryObjectInfo, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__queryObjectInfo(struct soap *soap, const struct ns1__queryObjectInfo *a, const char *tag, const char *type)
{
	if (soap_out_ns1__queryObjectInfo(soap, tag ? tag : "ns1:queryObjectInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__queryObjectInfo * SOAP_FMAC4 soap_get_ns1__queryObjectInfo(struct soap *soap, struct ns1__queryObjectInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__queryObjectInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__queryObjectInfoResponse(struct soap *soap, struct ns1__queryObjectInfoResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_SOAP_ENC__string(soap, &a->_queryObjectInfoReturn);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__queryObjectInfoResponse(struct soap *soap, const struct ns1__queryObjectInfoResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_SOAP_ENC__string(soap, (char*const*)&a->_queryObjectInfoReturn);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__queryObjectInfoResponse(struct soap *soap, const char *tag, int id, const struct ns1__queryObjectInfoResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__queryObjectInfoResponse), type))
		return soap->error;
	if (!a->_queryObjectInfoReturn)
	{	if (soap_element_empty(soap, "queryObjectInfoReturn"))
			return soap->error;
	}
	else
	if (soap_out_SOAP_ENC__string(soap, "queryObjectInfoReturn", -1, (char*const*)&a->_queryObjectInfoReturn, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__queryObjectInfoResponse * SOAP_FMAC4 soap_in_ns1__queryObjectInfoResponse(struct soap *soap, const char *tag, struct ns1__queryObjectInfoResponse *a, const char *type)
{
	size_t soap_flag__queryObjectInfoReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__queryObjectInfoResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__queryObjectInfoResponse, sizeof(struct ns1__queryObjectInfoResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__queryObjectInfoResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__queryObjectInfoReturn && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_SOAP_ENC__string(soap, NULL, (char**)&a->_queryObjectInfoReturn, "SOAP-ENC:string"))
				{	soap_flag__queryObjectInfoReturn--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->_queryObjectInfoReturn))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__queryObjectInfoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__queryObjectInfoResponse, SOAP_TYPE_ns1__queryObjectInfoResponse, sizeof(struct ns1__queryObjectInfoResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__queryObjectInfoResponse * SOAP_FMAC2 soap_instantiate_ns1__queryObjectInfoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__queryObjectInfoResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__queryObjectInfoResponse *p;
	size_t k = sizeof(struct ns1__queryObjectInfoResponse);
	if (n < 0)
	{	p = SOAP_NEW(struct ns1__queryObjectInfoResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns1__queryObjectInfoResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__queryObjectInfoResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__queryObjectInfoResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__queryObjectInfoResponse(struct soap *soap, const struct ns1__queryObjectInfoResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns1__queryObjectInfoResponse(soap, tag ? tag : "ns1:queryObjectInfoResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__queryObjectInfoResponse * SOAP_FMAC4 soap_get_ns1__queryObjectInfoResponse(struct soap *soap, struct ns1__queryObjectInfoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__queryObjectInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENC__string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_SOAP_ENC__string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENC__string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_SOAP_ENC__string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_SOAP_ENC__string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_SOAP_ENC__string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_SOAP_ENC__string(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default_SOAP_ENC__string(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENC__string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENC__string(soap, tag ? tag : "SOAP-ENC:string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_SOAP_ENC__string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENC__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new__QName(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default__QName(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag ? tag : "QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default_string(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
